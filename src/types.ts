/**
 * This file contains the Data Transfer Objects (DTOs) and Command Models used throughout the application.
 * These types are derived from the database schema to ensure consistency between the API and the database.
 *
 * DTOs are used for transferring data in API responses.
 * Command Models are used for representing data in API requests (e.g., for creating or updating resources).
 */

import type { Tables, TablesInsert, TablesUpdate } from "./db/database.types";

// #region --- Base & Utility Types ---

/**
 * Represents the source of a flashcard.
 * - `manual`: Created manually by the user.
 * - `ai-full`: Generated by AI and saved without user edits.
 * - `ai-edited`: Generated by AI and subsequently edited by the user.
 */
export type FlashcardSource = "ai-full" | "ai-edited" | "manual";

/**
 * Represents the pagination information included in paginated API responses.
 */
export interface Pagination {
  page: number;
  limit: number;
  total: number;
}

// #endregion

// #region --- Flashcard Types ---

/**
 * DTO for a single flashcard.
 * This is the public representation of a flashcard returned by the API.
 * It is derived from the `flashcards` table, excluding sensitive or internal fields.
 */
export type FlashcardDto = Pick<Tables<"flashcards">, "id" | "front" | "back" | "source" | "created_at" | "updated_at">;

/**
 * DTO for a paginated list of flashcards.
 * Used in the `GET /flashcards` endpoint response.
 */
export interface PaginatedFlashcardsDto {
  data: FlashcardDto[];
  pagination: Pagination;
}

/**
 * Base command model for creating a flashcard, containing common fields.
 * This is extended by more specific command models.
 */
type BaseCreateFlashcardCommand = Pick<TablesInsert<"flashcards">, "front" | "back">;

/**
 * Command model for creating a flashcard manually.
 * `generation_id` must be null.
 */
type ManualFlashcardCommand = BaseCreateFlashcardCommand & {
  source: "manual";
  generation_id: null;
};

/**
 * Command model for creating a flashcard from an AI generation.
 * `generation_id` is required.
 */
type AiFlashcardCommand = BaseCreateFlashcardCommand & {
  source: "ai-full" | "ai-edited";
  generation_id: number;
};

/**
 * A discriminated union for the command to create a single flashcard.
 * This ensures that `generation_id` is correctly provided based on the `source`.
 */
export type CreateFlashcardCommand = ManualFlashcardCommand | AiFlashcardCommand;

/**
 * Command model for the `POST /flashcards` endpoint.
 * It contains an array of flashcards to be created.
 */
export interface CreateFlashcardsCommand {
  flashcards: CreateFlashcardCommand[];
}

/**
 * Command model for updating an existing flashcard.
 * All fields are optional. It omits fields that should not be updated directly by the user.
 */
export type UpdateFlashcardCommand = Omit<
  TablesUpdate<"flashcards">,
  "id" | "user_id" | "created_at" | "updated_at" | "generation_id"
>;

// #endregion

// #region --- Generation Types ---

/**
 * Command model for initiating the AI flashcard generation process.
 * Used in the `POST /generations` endpoint.
 */
export interface GenerateFlashcardsCommand {
  source_text: string;
}

/**
 * DTO for a single flashcard proposal returned after an AI generation request.
 * These are not yet saved to the database and lack an `id` and timestamps.
 */
export type FlashcardProposalDto = Pick<TablesInsert<"flashcards">, "front" | "back" | "source">;

/**
 * DTO for the response of the `POST /generations` endpoint.
 */
export interface GenerateFlashcardsResponseDto {
  generation_id: number;
  flashcards_proposals: FlashcardProposalDto[];
  generated_count: number;
}

/**
 * DTO for a generation record.
 * Represents the metadata of a single AI generation request.
 * It omits internal fields like `user_id` and `source_text_hash`.
 */
export type GenerationDto = Omit<Tables<"generations">, "user_id" | "source_text_hash">;

/**
 * DTO for the detailed view of a generation record, including the flashcards it produced.
 * Used in the `GET /generations/{id}` endpoint response.
 */
export type GenerationDetailsDto = GenerationDto & {
  flashcards: FlashcardDto[];
};

// #endregion

// #region --- Log Types ---

/**
 * DTO for a generation error log entry.
 * It omits the `user_id` for privacy.
 */
export type GenerationErrorLogDto = Omit<Tables<"generation_error_logs">, "user_id">;

// #endregion
