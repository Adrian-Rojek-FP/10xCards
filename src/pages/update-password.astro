---
import Layout from "@/layouts/Layout.astro";
import { UpdatePasswordForm } from "@/components/auth/UpdatePasswordForm";

const title = "Zmiana hasła - 10xCards";

import { createSupabaseServerClient } from "@/db/supabase.client";

// Check for error or recovery parameters in the URL
const url = new URL(Astro.request.url);
const error = url.searchParams.get("error");
const errorCode = url.searchParams.get("error_code");
const errorDescription = url.searchParams.get("error_description");
const code = url.searchParams.get("code"); // PKCE code

// Log URL parameters for debugging
console.log("[Update Password Page] URL params:", {
  error,
  errorCode,
  code: code ? "present" : "none",
  search: url.search,
});

// If there's an error from Supabase, show it
let authError: string | null = null;
if (error || errorCode) {
  if (errorCode === "otp_expired") {
    authError = "Link resetowania hasła wygasł. Poproś o nowy link resetowania hasła.";
  } else if (error === "access_denied") {
    authError = "Link resetowania hasła jest nieprawidłowy. Poproś o nowy link resetowania hasła.";
  } else {
    authError = errorDescription || "Wystąpił błąd podczas resetowania hasła. Poproś o nowy link.";
  }
}

// Handle PKCE code exchange on server-side if code is present
if (code && !authError) {
  try {
    // Get runtime environment for Cloudflare
    const runtime = Astro.locals.runtime as { env?: { SUPABASE_URL?: string; SUPABASE_KEY?: string } } | undefined;
    const supabaseUrl = runtime?.env?.SUPABASE_URL || import.meta.env.SUPABASE_URL;
    const supabaseKey = runtime?.env?.SUPABASE_KEY || import.meta.env.SUPABASE_KEY;

    // Create Supabase client
    const supabase = createSupabaseServerClient(
      { cookies: Astro.cookies, headers: Astro.request.headers },
      supabaseUrl,
      supabaseKey
    );

    // Exchange code for session - this must happen server-side for PKCE
    const { data, error: exchangeError } = await supabase.auth.exchangeCodeForSession(code);

    console.log("[Update Password Page] PKCE exchange result:", {
      hasSession: !!data.session,
      error: exchangeError?.message,
    });

    if (exchangeError) {
      authError = "Link resetowania hasła wygasł lub został już użyty. Poproś o nowy link.";
    } else if (data.session) {
      console.log("[Update Password Page] PKCE session established successfully");
      // Redirect to same page without code parameter to ensure cookies are set
      // This makes the browser receive Set-Cookie headers and reload with session
      return Astro.redirect("/update-password");
    }
  } catch (err) {
    console.error("[Update Password Page] PKCE exchange error:", err);
    authError = "Wystąpił błąd podczas weryfikacji linku resetowania.";
  }
}

// Check for session on server-side (can read httpOnly cookies)
let hasValidSession = false;
if (!code && !authError) {
  try {
    const runtime = Astro.locals.runtime as { env?: { SUPABASE_URL?: string; SUPABASE_KEY?: string } } | undefined;
    const supabaseUrl = runtime?.env?.SUPABASE_URL || import.meta.env.SUPABASE_URL;
    const supabaseKey = runtime?.env?.SUPABASE_KEY || import.meta.env.SUPABASE_KEY;

    const supabase = createSupabaseServerClient(
      { cookies: Astro.cookies, headers: Astro.request.headers },
      supabaseUrl,
      supabaseKey
    );

    const {
      data: { session },
    } = await supabase.auth.getSession();

    console.log("[Update Password Page] Server-side session check:", {
      hasSession: !!session,
      userId: session?.user?.id,
    });

    if (session) {
      hasValidSession = true;
    } else {
      authError = "Sesja wygasła lub link resetowania jest nieprawidłowy. Poproś o nowy link resetowania hasła.";
    }
  } catch (err) {
    console.error("[Update Password Page] Session check error:", err);
    authError = "Wystąpił błąd podczas weryfikacji sesji.";
  }
}

export const prerender = false;
---

<Layout title={title}>
  <div class="min-h-[calc(100vh-80px)] flex items-center justify-center px-4 py-12">
    <div class="w-full max-w-md">
      <div class="text-center mb-8">
        <h1 class="text-3xl font-bold tracking-tight">Ustaw nowe hasło</h1>
        <p class="text-muted-foreground mt-2">Wprowadź nowe hasło dla swojego konta</p>
      </div>

      <div class="rounded-lg border bg-card p-8 shadow-sm">
        {
          authError ? (
            <div>
              <div
                class="rounded-lg border border-destructive/50 bg-destructive/10 p-4 text-sm text-destructive mb-6"
                role="alert"
              >
                <div class="flex items-start gap-3">
                  <svg
                    class="size-5 shrink-0 mt-0.5"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke-width="2"
                    stroke="currentColor"
                    aria-hidden="true"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z"
                    />
                  </svg>
                  <p>{authError}</p>
                </div>
              </div>
              <div class="text-center">
                <a
                  href="/password-reset"
                  class="inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background bg-primary text-primary-foreground hover:bg-primary/90 h-10 py-2 px-4"
                >
                  Poproś o nowy link
                </a>
              </div>
            </div>
          ) : hasValidSession ? (
            <UpdatePasswordForm client:load />
          ) : (
            <div class="flex items-center justify-center py-8">
              <svg class="animate-spin size-8 text-primary" fill="none" viewBox="0 0 24 24" aria-hidden="true">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" />
                <path
                  class="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                />
              </svg>
            </div>
          )
        }
      </div>
    </div>
  </div>
</Layout>
