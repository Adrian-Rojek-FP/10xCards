// src/lib/services/generation.service.ts
import type { SupabaseClient } from "../../db/supabase.client";
import type { GenerationCreateResponseDto, FlashcardProposalDto } from "../../types";
import crypto from "crypto";

/**
 * Mock AI Service Response
 *
 * This is a placeholder implementation for the development phase.
 * In production, this should be replaced with actual AI service integration.
 */
function mockAIServiceGenerateFlashcards(sourceText: string): FlashcardProposalDto[] {
  // Mock implementation: Generate a fixed number of sample flashcards
  // In production, this would call an external AI service with sourceText parameter
  // For now, we ignore the sourceText and return fixed examples
  void sourceText; // Explicitly mark as intentionally unused in mock

  const sampleFlashcards: FlashcardProposalDto[] = [
    {
      front: "What is the main concept discussed in the text?",
      back: "Based on the provided source text, this is a generated answer from AI.",
      source: "ai-full",
    },
    {
      front: "Define the key term mentioned in the passage",
      back: "This is a mock definition generated by the AI service.",
      source: "ai-full",
    },
    {
      front: "How does the author explain the process?",
      back: "The author explains it through a step-by-step approach as described in the text.",
      source: "ai-full",
    },
    {
      front: "What is the significance of the topic?",
      back: "The topic is significant because it addresses important concepts related to the subject matter.",
      source: "ai-full",
    },
    {
      front: "What conclusion can be drawn from the text?",
      back: "The conclusion emphasizes the importance of understanding the core principles discussed.",
      source: "ai-full",
    },
  ];

  return sampleFlashcards;
}

/**
 * Calculate SHA-256 hash of the source text
 */
function calculateHash(text: string): string {
  return crypto.createHash("sha256").update(text, "utf8").digest("hex");
}

/**
 * Generate flashcards from source text using AI service
 *
 * @param sourceText - The input text (1000-10000 characters)
 * @param userId - The authenticated user's ID
 * @param supabase - Supabase client instance
 * @returns Generation response with flashcard proposals
 * @throws Error if AI service fails or database operation fails
 */
export async function generateFlashcards(
  sourceText: string,
  userId: string,
  supabase: SupabaseClient
): Promise<GenerationCreateResponseDto> {
  const startTime = Date.now();

  try {
    // Step 1: Call AI service to generate flashcard proposals
    // TODO: Replace with actual AI service integration
    const flashcardsProposals = mockAIServiceGenerateFlashcards(sourceText);
    const generatedCount = flashcardsProposals.length;

    // Step 2: Calculate generation metadata
    const endTime = Date.now();
    const generationDuration = endTime - startTime;
    const sourceTextHash = calculateHash(sourceText);
    const sourceTextLength = sourceText.length;

    // Step 3: Save generation metadata to database
    const { data: generationData, error: insertError } = await supabase
      .from("generations")
      .insert({
        user_id: userId,
        model: "mock-ai-model-v1", // TODO: Replace with actual model name
        generated_count: generatedCount,
        source_text_hash: sourceTextHash,
        source_text_length: sourceTextLength,
        generation_duration: generationDuration,
      })
      .select()
      .single();

    if (insertError || !generationData) {
      console.error("Database insert error:", insertError);
      throw new Error("Failed to save generation metadata to database");
    }

    // Step 4: Return response with generation ID and flashcard proposals
    return {
      generation_id: generationData.id,
      flashcards_proposals: flashcardsProposals,
      generated_count: generatedCount,
    };
  } catch (error) {
    // Step 5: Log error to generation_error_logs table
    const sourceTextHash = calculateHash(sourceText);
    const errorMessage = error instanceof Error ? error.message : "Unknown error";
    const errorCode = "AI_SERVICE_ERROR"; // Could be more specific based on error type

    try {
      await supabase.from("generation_error_logs").insert({
        user_id: userId,
        error_code: errorCode,
        error_message: errorMessage,
        model: "mock-ai-model-v1",
        source_text_hash: sourceTextHash,
        source_text_length: sourceText.length,
      });
    } catch (logError) {
      console.error("Failed to log generation error:", logError);
    }

    // Re-throw the original error
    throw error;
  }
}
